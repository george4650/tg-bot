package main

import (
	"fmt"
	"io/ioutil"
	"log"
	Model "myapp/internal/model"
	Repository "myapp/internal/repository"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

const tgbotapiKey = "TOKEN"

var mainMenu = tgbotapi.NewReplyKeyboard(
	tgbotapi.NewKeyboardButtonRow(
		tgbotapi.NewKeyboardButton("üìï –ú–µ–Ω—é"),
		tgbotapi.NewKeyboardButton("üóì –ú–æ–∏ –∑–∞–∫–∞–∑—ã"),
		tgbotapi.NewKeyboardButton("üóí –ö–æ—Ä–∑–∏–Ω–∞"),
	),
)

func main() {

	err := Repository.OpenTable()
	if err != nil {
		panic("Connect to db error: " + err.Error())
	}

	bot, err := tgbotapi.NewBotAPI(tgbotapiKey)
	if err != nil {
		panic("bot init error: " + err.Error())
	}

	botUser, err := bot.GetMe()
	if err != nil {
		panic("bot getme error: " + err.Error())
	}

	fmt.Printf("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ó–∞–ø—É—â–µ–Ω –±–æ—Ç: %s\n", botUser.FirstName)

	u := tgbotapi.NewUpdate(1)
	u.Timeout = 60

	updChannel, err := bot.GetUpdatesChan(u)
	if err != nil {
		panic("update channel error: " + err.Error())
	}

	State := 0
	Order := Model.Order{}

	for update := range updChannel {

		if update.CallbackQuery != nil {

			if strings.Contains(update.CallbackQuery.Data, "–îo–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É") {

				var (
					Product_id []string
					product_id string
				)

				//–ü–æ—É—á–∞–µ–º id —Ç–æ–≤–∞—Ä–∞
				Product_id = strings.Split(update.CallbackQuery.Data, "–îo–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É ")

				for _, p := range Product_id {
					product_id += p
				}

				product, err := Repository.ReadOne(product_id)
				if err != nil {
					log.Println(err)
					bot.Send(tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, —Ç–æ–≤–∞—Ä –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ..."))
					continue
				}

				err = Repository.AddToCart(*product)
				if err != nil {
					log.Println(err)
					bot.Send(tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, err.Error()))
					continue
				}

				bot.Send(tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, fmt.Sprintf(`–¢–æ–≤–∞—Ä - "%s" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É`, product.Product_Name)))
			}

			if strings.Contains(update.CallbackQuery.Data, "–£–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã —Å id = ") {

				var (
					Product_id []string
					product_id string
				)

				//–ü–æ—É—á–∞–µ–º id —Ç–æ–≤–∞—Ä–∞
				Product_id = strings.Split(update.CallbackQuery.Data, "–£–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã —Å id = ")

				for _, p := range Product_id {
					product_id += p
				}

				err := Repository.DeleteFromCart(product_id)
				if err != nil {
					log.Println(err)
					bot.Send(tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, —Ç–æ–≤–∞—Ä –Ω–µ –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ..."))
					continue
				}
				//bot.Send(tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, fmt.Sprintf(`–¢–æ–≤–∞—Ä - "%s" —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã`, p.Product_Name)))
			}

			if strings.Contains(update.CallbackQuery.Data, "–£–≤–µ–ª–∏—á–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ —Å id = ") {

				var (
					Product_id []string
					product_id string
				)

				//–ü–æ—É—á–∞–µ–º id —Ç–æ–≤–∞—Ä–∞
				Product_id = strings.Split(update.CallbackQuery.Data, "–£–≤–µ–ª–∏—á–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ —Å id = ")

				for _, p := range Product_id {
					product_id += p
				}

				err := Repository.IncrementKoll(product_id)
				if err != nil {
					log.Println(err)
					continue
				}
			}

			if strings.Contains(update.CallbackQuery.Data, "–£–º–µ–Ω—å—à–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ —Å id = ") {

				var (
					Product_id []string
					product_id string
				)

				//–ü–æ—É—á–∞–µ–º id —Ç–æ–≤–∞—Ä–∞
				Product_id = strings.Split(update.CallbackQuery.Data, "–£–º–µ–Ω—å—à–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ —Å id = ")

				for _, p := range Product_id {
					product_id += p
				}

				err := Repository.DeincrementKoll(product_id)
				if err != nil {
					log.Println(err)
					continue
				}
			}

		}

		if update.Message != nil {

			if update.Message.IsCommand() {
				Command := update.Message.Command()
				if Command == "start" {
					msg := tgbotapi.NewMessage(
						update.Message.Chat.ID,
						fmt.Sprintf("–í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º: %s", botUser.FirstName))
					msg.ReplyMarkup = mainMenu
					bot.Send(msg)
				} else if Command == "Order" {

					cart := Repository.ReturnCart()
					if err != nil {
						log.Println(err)
						continue
					}

					if len(cart) == 0 {
						msgConfig := tgbotapi.NewMessage(update.Message.Chat.ID, "–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤!")
						bot.Send(msgConfig)
						continue
					}

					msg := tgbotapi.NewMessage(
						update.Message.Chat.ID, "–í–∞—à –∑–∞–∫–∞–∑:")

					bot.Send(msg)

					for _, o := range cart {

						response := fmt.Sprintf("–¶–µ–Ω–∞ –∑–∞ —à—Ç - %d —Ä—É–±\n%s x %d —à—Ç - %d —Ä—É–±\n",
							o.Product_Price, o.Product_Name, o.Product_Koll, o.Product_Price*o.Product_Koll)

						msgConfig := tgbotapi.NewMessage(update.Message.Chat.ID, response)

						bot.Send(msgConfig)
					}

					msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è:")
					bot.Send(msg)

					msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–í–∞—à–µ –∏–º—è:")
					bot.Send(msg)

					State = 1

				} else {
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç")
					bot.Send(msg)
				}

			} else {

				//–ú–µ–Ω—é
				if update.Message.Text == mainMenu.Keyboard[0][0].Text {

					products, err := Repository.GetAllProducts()
					if err != nil {
						log.Println(err)
						continue
					}

					msgConfig := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–∞—à–µ –º–µ–Ω—é:")
					bot.Send(msgConfig)

					for _, p := range products {

						photoBytes, err := ioutil.ReadFile(p.Product_Image)
						if err != nil {
							log.Println(err)
						}

						photoFileBytes := tgbotapi.FileBytes{
							Name:  "picture",
							Bytes: photoBytes,
						}

						message := tgbotapi.NewPhotoUpload(int64(update.Message.Chat.ID), photoFileBytes)
						bot.Send(message)

						response := fmt.Sprintf("%s - %d —Ä—É–±\n", p.Product_Name, p.Product_Price)

						msgConfig = tgbotapi.NewMessage(update.Message.Chat.ID, response)

						msgConfig.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
							tgbotapi.NewInlineKeyboardRow(
								tgbotapi.NewInlineKeyboardButtonData("–í –∫–æ—Ä–∑–∏–Ω—É", fmt.Sprintf("–îo–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É %d", p.Product_Id)),
							),
						)
						bot.Send(msgConfig)
					}
				}

				//–ú–æ–∏ –∑–∞–∫–∞–∑—ã
				if update.Message.Text == mainMenu.Keyboard[0][1].Text {

					orders, err := Repository.GetOrders(update.Message.From.ID)
					if err != nil {
						log.Println(err)
						continue
					}
					if len(orders) == 0 {
						msgConfig := tgbotapi.NewMessage(update.Message.Chat.ID, "–£ –≤–∞—Å –µ—â—ë –Ω–µ –±—ã–ª–æ –∑–∞–∫–∞–∑–æ–≤")
						bot.Send(msgConfig)
						continue
					}

					msgConfig := tgbotapi.NewMessage(update.Message.Chat.ID, "–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:")
					bot.Send(msgConfig)

					for key, o := range orders {

						time := o.Order_time.Format("2006/01/02")

						response := fmt.Sprintf("–ó–∞–∫–∞–∑ ‚Ññ%d –æ—Ç %v\n%s x %d —à—Ç - %d —Ä—É–±\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: %s\nA–¥—Ä–µ—Å: %s\nEmail: %s\n–¢–µ–ª–µ—Ñ–æ–Ω: %s\n",
							key+1, time, o.Product_Name, o.Product_Koll, o.Product_Price*o.Product_Koll, o.Customer_Name, o.Customer_Address, o.Customer_Email, o.Customer_Phone)

						msgConfig := tgbotapi.NewMessage(update.Message.Chat.ID, response)

						bot.Send(msgConfig)
					}
				}

				//–ö–æ—Ä–∑–∏–Ω–∞
				if update.Message.Text == mainMenu.Keyboard[0][2].Text {

					if err != nil {
						log.Println(err)
						continue
					}

					cart := Repository.ReturnCart()
					if err != nil {
						log.Println(err)
						continue
					}

					if len(cart) == 0 {
						msgConfig := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
						bot.Send(msgConfig)
						continue
					}
					msgConfig := tgbotapi.NewMessage(update.Message.Chat.ID, "–ö–æ—Ä–∑–∏–Ω–∞:")
					bot.Send(msgConfig)

					for _, o := range cart {

						photoBytes, err := ioutil.ReadFile(o.Product_Image)
						if err != nil {
							log.Println(err)
						}

						photoFileBytes := tgbotapi.FileBytes{
							Name:  "picture",
							Bytes: photoBytes,
						}

						message := tgbotapi.NewPhotoUpload(int64(update.Message.Chat.ID), photoFileBytes)
						bot.Send(message)

						response := fmt.Sprintf("–¶–µ–Ω–∞ –∑–∞ —à—Ç - %d —Ä—É–±\n%s x %d —à—Ç - %d —Ä—É–±\n",
							o.Product_Price, o.Product_Name, o.Product_Koll, o.Product_Price*o.Product_Koll)

						msgConfig := tgbotapi.NewMessage(update.Message.Chat.ID, response)

						msgConfig.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
							tgbotapi.NewInlineKeyboardRow(
								tgbotapi.NewInlineKeyboardButtonData("‚ñº", fmt.Sprintf("–£–º–µ–Ω—å—à–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ —Å id = %d", o.Product_Id)),
								tgbotapi.NewInlineKeyboardButtonData("‚ñ≤", fmt.Sprintf("–£–≤–µ–ª–∏—á–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ —Å id = %d", o.Product_Id)),
							),
							tgbotapi.NewInlineKeyboardRow(
								tgbotapi.NewInlineKeyboardButtonData("–£–¥–∞–ª–∏—Ç—å", fmt.Sprintf("–£–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã —Å id = %d", o.Product_Id)),
							),
						)
						bot.Send(msgConfig)
					}
					msgConfig = tgbotapi.NewMessage(update.Message.Chat.ID, `–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ /Order`)
					bot.Send(msgConfig)

				}

				switch State {
				case 1:
					Order.Customer_Name = update.Message.Text
					if update.Message.Text == "" {
						State = 0
					}
					State++
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–∞—à –∞–¥—Ä–µ—Å:")
					bot.Send(msg)
				case 2:
					Order.Customer_Address = update.Message.Text
					if update.Message.Text == "" {
						State = 0
					}
					State++
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
					bot.Send(msg)
				case 3:
					Order.Customer_Phone = update.Message.Text
					if update.Message.Text == "" {
						State = 0
					}
					State++
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–∞—à Email:")
					bot.Send(msg)
				case 4:
					Order.Customer_Email = update.Message.Text

					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–∞—à –∑–∞–∫–∞–∑:\n")
					bot.Send(msg)

					cart := Repository.ReturnCart()
					if err != nil {
						log.Println(err)
						continue
					}

					for _, o := range cart {
						response := fmt.Sprintf("–¶–µ–Ω–∞ –∑–∞ —à—Ç - %d —Ä—É–±\n%s x %d —à—Ç - %d —Ä—É–±\n",
							o.Product_Price, o.Product_Name, o.Product_Koll, o.Product_Price*o.Product_Koll)

						msgConfig := tgbotapi.NewMessage(update.Message.Chat.ID, response)

						bot.Send(msgConfig)
					}
					msg = tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–ü–æ–∫—É–ø–∞—Ç–µ–ª—å - %s\nA–¥—Ä–µ—Å - %s\nEmail - %s\n–¢–µ–ª–µ—Ñ–æ–Ω - %s\n", Order.Customer_Name, Order.Customer_Address, Order.Customer_Email, Order.Customer_Phone))
					bot.Send(msg)
					msg = tgbotapi.NewMessage(update.Message.Chat.ID, `–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–ó–∞–∫–∞–∑". –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–û—Ç–º–µ–Ω–∞".`)
					State++
					bot.Send(msg)
				case 5:
					var err error

					msg := update.Message.Text
					if msg == "–ó–∞–∫–∞–∑" {

						cart := Repository.ReturnCart()

						for product_id, product := range cart {
							Order.User_id = update.Message.From.ID
							Order.Product_Id = product_id
							Order.Product_Price = product.Product_Price
							Order.Product_Name = product.Product_Name
							Order.Product_Koll = product.Product_Koll
							Order.Order_status = "–ü—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É"
							Order.Order_time = time.Now()

							//–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
							err = Repository.CreateOrder(Order)
							fmt.Println(Order)
							if err != nil {
								log.Println(err)
								send := tgbotapi.NewMessage(update.Message.Chat.ID, "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
								bot.Send(send)
								break
							}

						}
						if err == nil {
							send := tgbotapi.NewMessage(update.Message.Chat.ID, "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
							bot.Send(send)

							Repository.Cart = nil
							Order = Model.Order{}
						}

					} else if msg == "–û—Ç–º–µ–Ω–∞" {
						send := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ü–∏–∏)")
						bot.Send(send)
						State = 0
					}
				}

			}

		}
	}

	bot.StopReceivingUpdates()
}
